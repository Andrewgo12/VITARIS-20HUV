#!/usr/bin/env python3
"""
Iniciador Simplificado de VITAL RED
Servidor b√°sico funcional para pruebas
"""

import os
import sys
import time
import subprocess
import threading
from datetime import datetime

def print_header():
    print("=" * 80)
    print("üè• VITAL RED - INICIADOR SIMPLIFICADO")
    print("Hospital Universitaria ESE")
    print("Servidor b√°sico para pruebas y desarrollo")
    print("=" * 80)

def start_backend_simple():
    """Iniciar backend simplificado"""
    print(f"\nüñ•Ô∏è  INICIANDO BACKEND SIMPLIFICADO...")
    print("-" * 60)
    
    try:
        # Crear servidor b√°sico con FastAPI
        server_code = '''
import uvicorn
from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import JSONResponse
import mysql.connector
from datetime import datetime

app = FastAPI(title="VITAL RED API", version="1.0.0")

# Configurar CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Configuraci√≥n de base de datos
DB_CONFIG = {
    "host": "localhost",
    "port": 3306,
    "user": "root",
    "password": "",
    "database": "vital_red"
}

@app.get("/")
async def root():
    return {"message": "VITAL RED API - Hospital Universitaria ESE", "status": "running", "timestamp": datetime.now().isoformat()}

@app.get("/health")
async def health_check():
    try:
        # Verificar conexi√≥n a base de datos
        connection = mysql.connector.connect(**DB_CONFIG)
        cursor = connection.cursor()
        cursor.execute("SELECT COUNT(*) FROM users")
        user_count = cursor.fetchone()[0]
        cursor.close()
        connection.close()
        
        return {
            "status": "healthy",
            "database": "connected",
            "users": user_count,
            "timestamp": datetime.now().isoformat()
        }
    except Exception as e:
        return {
            "status": "unhealthy",
            "database": "disconnected",
            "error": str(e),
            "timestamp": datetime.now().isoformat()
        }

@app.post("/api/auth/login")
async def login(credentials: dict):
    email = credentials.get("email")
    password = credentials.get("password")
    
    # Validaci√≥n b√°sica
    if email == "admin@hospital-ese.com" and password == "admin123":
        return {
            "success": True,
            "token": "mock_jwt_token_for_testing",
            "user": {
                "id": 1,
                "email": email,
                "name": "Administrador",
                "role": "admin"
            }
        }
    else:
        return JSONResponse(
            status_code=401,
            content={"success": False, "message": "Credenciales inv√°lidas"}
        )

@app.get("/api/gmail-extractor/status")
async def gmail_extractor_status():
    return {
        "status": "ready",
        "configured_email": "kevinrlinze@gmail.com",
        "last_extraction": None,
        "total_emails": 0
    }

@app.post("/api/gmail-extractor/start")
async def start_extraction():
    return {
        "success": True,
        "session_id": "test_session_001",
        "message": "Extracci√≥n iniciada (modo de prueba)"
    }

@app.get("/api/gmail-extractor/progress")
async def extraction_progress():
    return {
        "session_id": "test_session_001",
        "status": "completed",
        "total_emails": 5,
        "processed": 5,
        "successful": 5,
        "failed": 0,
        "progress_percentage": 100
    }

@app.get("/api/medical-cases")
async def get_medical_cases():
    return {
        "cases": [],
        "total": 0,
        "page": 1,
        "per_page": 10
    }

@app.get("/api/users")
async def get_users():
    try:
        connection = mysql.connector.connect(**DB_CONFIG)
        cursor = connection.cursor(dictionary=True)
        cursor.execute("SELECT id, username, email, first_name, last_name, role, is_active FROM users")
        users = cursor.fetchall()
        cursor.close()
        connection.close()
        
        return {"users": users, "total": len(users)}
    except Exception as e:
        return {"users": [], "total": 0, "error": str(e)}

if __name__ == "__main__":
    print("üöÄ Iniciando VITAL RED API Server...")
    print("üìç URL: http://localhost:8001")
    print("üìñ Docs: http://localhost:8001/docs")
    uvicorn.run(app, host="0.0.0.0", port=8001, log_level="info")
'''
        
        # Guardar servidor temporal
        with open('temp_server.py', 'w', encoding='utf-8') as f:
            f.write(server_code)
        
        print("‚úÖ Servidor simplificado creado")
        print("üöÄ Iniciando en puerto 8001...")
        
        # Iniciar servidor en hilo separado
        def run_server():
            try:
                subprocess.run([sys.executable, 'temp_server.py'], cwd=os.getcwd())
            except Exception as e:
                print(f"‚ùå Error en servidor: {e}")
        
        server_thread = threading.Thread(target=run_server, daemon=True)
        server_thread.start()
        
        # Esperar un momento para que inicie
        time.sleep(3)
        
        print("‚úÖ Backend iniciado en http://localhost:8001")
        return True
        
    except Exception as e:
        print(f"‚ùå Error iniciando backend: {e}")
        return False

def start_frontend():
    """Iniciar frontend"""
    print(f"\nüåê INICIANDO FRONTEND...")
    print("-" * 60)
    
    try:
        # Verificar si Node.js est√° disponible
        result = subprocess.run(['node', '--version'], capture_output=True, text=True)
        if result.returncode != 0:
            print("‚ùå Node.js no est√° instalado")
            print("üì• Instalar desde: https://nodejs.org/")
            return False
        
        print(f"‚úÖ Node.js {result.stdout.strip()}")
        
        # Verificar si las dependencias est√°n instaladas
        if not os.path.exists('client/node_modules'):
            print("üì¶ Instalando dependencias...")
            install_result = subprocess.run(['npm', 'install'], cwd='client', capture_output=True, text=True)
            if install_result.returncode != 0:
                print(f"‚ùå Error instalando dependencias: {install_result.stderr}")
                return False
            print("‚úÖ Dependencias instaladas")
        
        # Iniciar servidor de desarrollo
        print("üöÄ Iniciando servidor de desarrollo...")
        
        def run_frontend():
            try:
                subprocess.run(['npm', 'run', 'dev'], cwd='client')
            except Exception as e:
                print(f"‚ùå Error en frontend: {e}")
        
        frontend_thread = threading.Thread(target=run_frontend, daemon=True)
        frontend_thread.start()
        
        time.sleep(5)
        print("‚úÖ Frontend iniciado en http://localhost:5173")
        return True
        
    except Exception as e:
        print(f"‚ùå Error iniciando frontend: {e}")
        return False

def verify_system():
    """Verificar que el sistema est√© funcionando"""
    print(f"\nüîç VERIFICANDO SISTEMA...")
    print("-" * 60)
    
    try:
        import requests
        
        # Verificar backend
        try:
            response = requests.get('http://localhost:8001/health', timeout=5)
            if response.status_code == 200:
                print("‚úÖ Backend funcionando correctamente")
                data = response.json()
                print(f"   Estado: {data.get('status')}")
                print(f"   Base de datos: {data.get('database')}")
                print(f"   Usuarios: {data.get('users')}")
            else:
                print(f"‚ö†Ô∏è  Backend responde con c√≥digo: {response.status_code}")
        except Exception as e:
            print(f"‚ùå Backend no responde: {e}")
        
        # Verificar frontend
        try:
            response = requests.get('http://localhost:5173', timeout=5)
            if response.status_code == 200:
                print("‚úÖ Frontend funcionando correctamente")
            else:
                print(f"‚ö†Ô∏è  Frontend responde con c√≥digo: {response.status_code}")
        except Exception as e:
            print(f"‚ùå Frontend no responde: {e}")
        
        return True
        
    except ImportError:
        print("‚ö†Ô∏è  M√≥dulo 'requests' no disponible para verificaci√≥n")
        return True
    except Exception as e:
        print(f"‚ùå Error en verificaci√≥n: {e}")
        return False

def main():
    """Funci√≥n principal"""
    print_header()
    
    print(f"\nüïê Iniciando VITAL RED: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    
    # Iniciar backend
    backend_success = start_backend_simple()
    
    # Iniciar frontend
    frontend_success = start_frontend()
    
    # Verificar sistema
    if backend_success:
        verify_system()
    
    # Mostrar resumen
    print("\n" + "=" * 80)
    print("üìä RESUMEN DE INICIO")
    print("=" * 80)
    
    if backend_success:
        print("‚úÖ Backend: http://localhost:8001")
        print("   üìñ API Docs: http://localhost:8001/docs")
        print("   üîç Health: http://localhost:8001/health")
    else:
        print("‚ùå Backend: Error al iniciar")
    
    if frontend_success:
        print("‚úÖ Frontend: http://localhost:5173")
        print("   üè• VITAL RED: http://localhost:5173/vital-red/dashboard")
        print("   üìß Gmail Extractor: http://localhost:5173/vital-red/gmail-extractor")
    else:
        print("‚ùå Frontend: Error al iniciar")
    
    print(f"\nüîë CREDENCIALES DE PRUEBA:")
    print("   Email: admin@hospital-ese.com")
    print("   Password: admin123")
    
    print(f"\nüìß GMAIL CONFIGURADO:")
    print("   Cuenta: kevinrlinze@gmail.com")
    print("   Estado: Listo para configurar contrase√±a")
    
    if backend_success and frontend_success:
        print(f"\nüéâ ¬°VITAL RED INICIADO EXITOSAMENTE!")
        print("üöÄ Sistema listo para uso en Hospital Universitaria ESE")
        
        # Mantener servidor corriendo
        try:
            print(f"\n‚è≥ Manteniendo servidores activos...")
            print("   Presione Ctrl+C para detener")
            while True:
                time.sleep(1)
        except KeyboardInterrupt:
            print(f"\n\nüõë Deteniendo servidores...")
            print("‚úÖ VITAL RED detenido correctamente")
    else:
        print(f"\n‚ö†Ô∏è  INICIO PARCIAL")
        print("üîß Revisar errores arriba")
    
    return backend_success and frontend_success

if __name__ == "__main__":
    try:
        success = main()
        exit(0 if success else 1)
    except KeyboardInterrupt:
        print(f"\n\nüõë Proceso cancelado por el usuario")
        exit(1)
    except Exception as e:
        print(f"\n‚ùå Error inesperado: {e}")
        exit(1)
